"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2257],{26442:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var s=t(85893),a=t(11151);const o={sidebar_position:1},r="Class Diagram",l={id:"system-architecture/class-diagram",title:"Class Diagram",description:"Class Relationships",source:"@site/docs/system-architecture/class-diagram.md",sourceDirName:"system-architecture",slug:"/system-architecture/class-diagram",permalink:"/project-blastpad/docs/system-architecture/class-diagram",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2024-Spring/project-blastpad/edit/main/documentation/docs/system-architecture/class-diagram.md",tags:[],version:"current",lastUpdatedBy:"Mustafa Wedee",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"System Architecture",permalink:"/project-blastpad/docs/category/system-architecture"},next:{title:"Sequence Diagrams",permalink:"/project-blastpad/docs/system-architecture/sequence-diagrams"}},i={},c=[{value:"Class Relationships",id:"class-relationships",level:2},{value:"<code>Block</code>",id:"block",level:2},{value:"<code>BlocklyEditor</code>",id:"blocklyeditor",level:2},{value:"<code>Classroom</code>",id:"classroom",level:2},{value:"<code>ClassroomManager</code>",id:"classroommanager",level:2},{value:"<code>CodeCompiler</code>",id:"codecompiler",level:2},{value:"<code>Configuration</code>",id:"configuration",level:2},{value:"<code>Database</code>",id:"database",level:2},{value:"<code>DeviceManager</code>",id:"devicemanager",level:2},{value:"<code>Documentation</code>",id:"documentation",level:2},{value:"<code>Gallery</code>",id:"gallery",level:2},{value:"<code>Game</code>",id:"game",level:2},{value:"<code>Sensor</code>",id:"sensor",level:2},{value:"<code>UserManager</code>",id:"usermanager",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"class-diagram",children:"Class Diagram"}),"\n",(0,s.jsx)(n.mermaid,{value:'---\ntitle: BlastPad Class Diagram\n---\nclassDiagram\n    BlocklyEditor o-- "0..*" Game\n\tUserManager --o "0..*" Database\n\tClassroom o-- "0..*" Game\n\tDeviceManager <-- "1" UserManager\n\tBlocklyEditor o-- "0..*" Block\n\tDatabase o-- "0..*" Classroom\n\tBlocklyEditor o-- "1" Documentation\n\tGallery <-- "1" ClassroomManager\n\tGallery <-- "1" BlocklyEditor\t\n\tClassroomManager *-- "0..*" Classroom\n\tBlock <-- "0..*" Sensor\n\tGallery <-- "1" Configuration\t\n\tDeviceManager <-- "1" Gallery\n\tGame <-- "1" CodeCompiler\n\t\t\n    class Game{\n        -title: String\n\t\t-imageFile: String\n        -version: String\n\t\t-author: String\n\t\t\n\t\t+startGame()\n\t\t+pauseGame()\n\t\t+quitGame()\n\t\t+uploadToClassroom(Classroom)\n\t\t+compileGame() String\n    }\n    class BlocklyEditor{\n        -workspaces: Game[]\n\t\t-availableBlocks: Block[]\n\t\t\n\t\t+saveWorkspace()\n\t\t+loadWorkspace(game: Game)\n    }\n    class Block {\n        +type: String\n\t\t+message0: String\n\t\t+message1: String\n\t\t+args0: Object[]\n\t\t+args1: Object[]\n\t\t+previousStatement: String\n\t\t+nextStatment: String\n\t\t+tooltip: String\n\t\t+helpurl: String\n\t\t+style: String\n    }\n    class Sensor {\n\t\t+sensorID: int\n\t\t-sensorData: int[]\n\t\t-calibration: Boolean\n\n\t\t+getSensorData(): int[]\n\t\t+recalibrateSensor()\n\t\t+clearSensorData()\n    }\n    class Classroom {\n        +classroomID: int\n\t\t+teacherID: int\n\n\t\t+deleteGame(userID: int) bool\n\t\t+approveGame(userID: int) bool\n\t\t+uploadGame(game: Game)\n    }\n\tclass ClassroomManager {\n\t\t-classrooms: Classroom[]\n\n\t\t+joinClassroom(c: Classroom) bool\n\t\t+leaveClassroom(c: Classroom) bool\n\t\t+viewClassrooms()\n\t}\n\tclass UserManager {\n    \t-String: username\n\t\t-String: password\n\t\t+login(username: String, password: String) bool\n\t\t+createAccount(username: String, password: String) bool\n    }\n    class Configuration {\n\t\t+connectionStatus: Boolean\n\t\t+listOfAvailNetworks: String[]\n\t\t+SSID: String\n\t\t-securityKey: String\n\t\t\n\t\t+scan() String[]\n\t\t+connect(SSID: String, securityKey: String)\n\t\t+close()\n    }\n    class Gallery {\n    \t+openCodeEditor()\n\t\t+openConfiguration()\n\t\t+viewClassrooms()\n\t\t+viewGames() Games[]\n\t\t\t\n    }\n    class Documentation {\n\t\t+header: String\n    \t+body: String\n\n\t\t+loadContent(type: String) String\n\t}\n\tclass DeviceManager {\n\t\t+currentScreen: String\n\n\t\t+loadGallery()\n\t}\n\tclass Database {\n\t\t-users: User[]\n\t\t-classroom: Classroom[]\n\n\t\t+addUser()\n\t\t+removeUser()\n\t\t+addClassroom()\n\t\t+removeClassroom()\n\t}\n\tclass CodeCompiler {\n\t\t+compileBlocklytoPython()\n\t}'}),"\n",(0,s.jsx)(n.h2,{id:"class-relationships",children:"Class Relationships"}),"\n",(0,s.jsxs)(n.p,{children:["The class diagram above demonstrates various relationships between classes within the BlastPad system. The ",(0,s.jsx)(n.strong,{children:"User"})," class is associated with the ",(0,s.jsx)(n.strong,{children:"DeviceManager"})," class, indicating that a user can interact with the device via the device manager. The ",(0,s.jsx)(n.strong,{children:"DeviceManager"})," class is also associated with the ",(0,s.jsx)(n.strong,{children:"Gallery"})," for loading it, as indicated by the loadGallery() method. Furthermore, the ",(0,s.jsx)(n.strong,{children:"Gallery"})," class is connected to the ",(0,s.jsx)(n.strong,{children:"ClassroomManager"}),", allowing users to view multiple classrooms, as shown by the viewClassrooms() method."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"ClassroomManager"})," maintains a one-to-many relationship with the ",(0,s.jsx)(n.strong,{children:"Classroom"})," class, signifying that it can manage multiple ",(0,s.jsx)(n.strong,{children:"Classrooms"}),". Each ",(0,s.jsx)(n.strong,{children:"Classroom"})," is capable of handling multiple ",(0,s.jsx)(n.strong,{children:"Game"})," objects, as depicted by their ",(0,s.jsx)(n.strong,{children:"one-to-many"})," association. The ",(0,s.jsx)(n.strong,{children:"Game"})," class is similarly connected to the ",(0,s.jsx)(n.strong,{children:"BlocklyEditor"})," class through a ",(0,s.jsx)(n.strong,{children:"one-to-many"})," relationship, suggesting that the ",(0,s.jsx)(n.strong,{children:"BlocklyEditor"})," can manage numerous ",(0,s.jsx)(n.strong,{children:"Block"})," objects."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Database"})," class has a ",(0,s.jsx)(n.strong,{children:"one-to-many link"})," with both the ",(0,s.jsx)(n.strong,{children:"User"})," and ",(0,s.jsx)(n.strong,{children:"Classroom"})," classes, indicating that it stores and manages data from both Users and ",(0,s.jsx)(n.strong,{children:"Classrooms"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Block"})," class has a ",(0,s.jsx)(n.strong,{children:"one-to-many"})," relationship with the ",(0,s.jsx)(n.strong,{children:"Sensor"})," class, illustrating that blocks can access and utilize one or many sensors. The ",(0,s.jsx)(n.strong,{children:"Documentation"})," class is standalone but associated with the ",(0,s.jsx)(n.strong,{children:"BlocklyEditor"})," to provide tutorials for different blocks in the ",(0,s.jsx)(n.strong,{children:"BlocklyEditor"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Lastly, the ",(0,s.jsx)(n.strong,{children:"Gallery"})," class is linked to the ",(0,s.jsx)(n.strong,{children:"Configuration"})," class to handle WiFi connections."]}),"\n",(0,s.jsx)(n.h2,{id:"block",children:(0,s.jsx)(n.code,{children:"Block"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Describes the properties necessary to define and create a Blockly code block"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"blocklyeditor",children:(0,s.jsx)(n.code,{children:"BlocklyEditor"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Allows the user to work on Blockly based projects and create/place code blocks within it"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"classroom",children:(0,s.jsx)(n.code,{children:"Classroom"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Acts as a platform to host user-created Blockly games"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"classroommanager",children:(0,s.jsx)(n.code,{children:"ClassroomManager"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Lets the user interact with classrooms"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"codecompiler",children:(0,s.jsx)(n.code,{children:"CodeCompiler"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Converts the raw Blockly JSON definition into a runnable code Block in Python"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:(0,s.jsx)(n.code,{children:"Configuration"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Manages the Blastpad's WiFi connection supporting scanning for new networks, connecting to one, and disconnecting from one"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"database",children:(0,s.jsx)(n.code,{children:"Database"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Stores user and classroom information used for logging in and for retrieving classrooms"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"devicemanager",children:(0,s.jsx)(n.code,{children:"DeviceManager"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Loads the BlastPad's screen upon startup and keeps track of the current screen displayed"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"documentation",children:(0,s.jsx)(n.code,{children:"Documentation"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Loads help documentation for the Blockly code blocks"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"gallery",children:(0,s.jsx)(n.code,{children:"Gallery"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Manages the current screen displayed to the user and allows them to navigate to different pages"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"game",children:(0,s.jsx)(n.code,{children:"Game"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Contains the metadata of a Blockly game, allows users to play the game it defines, and upload it to a Classroom"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"sensor",children:(0,s.jsx)(n.code,{children:"Sensor"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Allows Blockly blocks to retrieve data from the BlastPad's onboard sensors (temperature, light, etc.)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"usermanager",children:(0,s.jsx)(n.code,{children:"UserManager"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Manages user login for the BlastPad with username/password authentication and allows the creation of a new account"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>r});var s=t(67294);const a={},o=s.createContext(a);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);