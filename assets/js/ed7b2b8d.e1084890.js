"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[3961],{25478:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var s=n(85893),r=n(11151);const a={sidebar_position:1},o="UML",i={id:"system-architecture/design",title:"design",description:"Purpose",source:"@site/docs/system-architecture/design.md",sourceDirName:"system-architecture",slug:"/system-architecture/design",permalink:"/project-blastpad/docs/system-architecture/design",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2024-Spring/project-blastpad/edit/main/documentation/docs/system-architecture/design.md",tags:[],version:"current",lastUpdatedBy:"Jeffin Johnykutty",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"System Architecture",permalink:"/project-blastpad/docs/category/system-architecture"},next:{title:"Development Environment",permalink:"/project-blastpad/docs/system-architecture/development-environment"}},c={},l=[];function d(t){const e={a:"a",em:"em",h1:"h1",mermaid:"mermaid",p:"p",strong:"strong",...(0,r.a)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Purpose"})}),"\n",(0,s.jsx)(e.p,{children:"The Design Document - Part I Architecture describes the software architecture and how the requirements are mapped into the design. This document will be a combination of diagrams and text that describes what the diagrams are showing."}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Requirements"})}),"\n",(0,s.jsx)(e.p,{children:"In addition to the general requirements the Design Document - Part I Architecture will contain:"}),"\n",(0,s.jsx)(e.p,{children:"A description the different components and their interfaces. For example: client, server, database."}),"\n",(0,s.jsx)(e.p,{children:"For each component provide class diagrams showing the classes to be developed (or used) and their relationship."}),"\n",(0,s.jsxs)(e.p,{children:["Sequence diagrams showing the data flow for ",(0,s.jsx)(e.em,{children:"all"})," use cases.\xa0One sequence diagram corresponds to one use case and different use cases should have different corresponding sequence diagrams."]}),"\n",(0,s.jsx)(e.p,{children:"Describe algorithms employed in your project, e.g. neural network paradigm, training and training data set, etc."}),"\n",(0,s.jsx)(e.h1,{id:"uml",children:"UML"}),"\n",(0,s.jsx)(e.mermaid,{value:'---\ntitle: BlastPad Class Diagram\n---\nclassDiagram\n    BlocklyEditor o-- "0..*" Game\n\tUser --o "0..*" Database\n\tClassroom o-- "0..*" Game\n\tDeviceManager <-- "1" User\n\tBlocklyEditor o-- "0..*" Block\n\tDatabase o-- "0..*" Classroom\n\tBlocklyEditor o-- "1" Documentation\n\tGallery <-- "1" ClassroomManager\n\tGallery <-- "1" BlocklyEditor\t\n\tClassroomManager *-- "0..*" Classroom\n\tBlock <-- "0..*" Sensor\n\tGallery <-- "1" Configuration\t\n\tDeviceManager <-- "1" Gallery\n\tGame <-- "1" CodeCompiler\n\t\t\n    class Game{\n        -title: String\n\t\t-imageFile: String\n        -version: String\n\t\t-author: String\n\t\t\n\t\t+startGame()\n\t\t+pauseGame()\n\t\t+quitGame()\n\t\t+uploadToClassroom(Classroom)\n\t\t+compileGame()\n    }\n    class BlocklyEditor{\n        -games: Game[]\n\t\t-availableBlocks: Block[]\n\t\t\n\t\t+createNewGame()\n\t\t+saveGame()\n\t\t+displayBlockInformation()\n\t\t+displayErrorMessages()\n    }\n    class Block {\n        +type: String\n\t\t+message0: String\n\t\t+message1: String\n\t\t+args0: Object[]\n\t\t+args1: Object[]\n\t\t+previousStatement: String\n\t\t+nextStatment: String\n\t\t+tooltip: String\n\t\t+helpurl: String\n\t\t+style: String\n    }\n    class Sensor {\n\t\t+sensorID: int\n\t\t-sensorData: int[]\n\n\t\t+getSensorData(): int[]\n\t\t+recalibrateSensor()\n\t\t+clearSensorData()\n    }\n    class Classroom {\n        +classroomID: int\n\t\t+teacherID: int\n\t\t+games: Game[]\n\n\t\t+deleteGame(userID: int) bool\n\t\t+approveGame(userID: int) bool\n\t\t+uploadGame(game: Game)\n    }\n\tclass ClassroomManager {\n\t\t-classrooms: Classroom[]\n\n\t\t+joinClassroom(c: Classroom)\n\t\t+leaveClassroom(c: Classroom)\n\t\t+viewClassrooms()\n\t}\n\tclass User {\n    \t-String: username\n\t\t-String: password\n\t\t+login(username: String, password: String)\n    }\n    class Configuration {\n\t\t+connectionStatus: Boolean\n\t\t+listOfAvailNetworks: String[]\n\t\t+SSID: String\n\t\t-securityKey: String\n\t\t\n\t\t+scan() String[]\n\t\t+connect(SSID: String, securityKey: String)\n\t\t+close()\n    }\n    class Gallery {\n    \t+openCodeEditor()\n\t\t+openConfiguration()\n\t\t+viewClassrooms()\n\t\t+viewGames()\n\t\t\t\n    }\n    class Documentation {\n\t\t+header: String\n    \t+body: String\n\n\t\t+loadContent(type: String) String\n\t}\n\tclass DeviceManager {\n\t\t+loadGallery()\n\t}\n\tclass Database {\n\t\t-users: User[]\n\t\t-classroom: Classroom[]\n\n\t\t+addUser()\n\t\t+removeUser()\n\t\t+addClassroom()\n\t\t+removeClassroom()\n\t}\n\tclass CodeCompiler {\n\t\t+compileBlocklytoPython()\n\t}'}),"\n",(0,s.jsx)(e.p,{children:"If there is a database:"}),"\n",(0,s.jsx)(e.p,{children:"Entity-relation diagram."}),"\n",(0,s.jsx)(e.p,{children:"Table design."}),"\n",(0,s.jsxs)(e.p,{children:["A check list for architecture design is attached here ",(0,s.jsx)(e.a,{href:"https://templeu.instructure.com/courses/106563/files/16928870/download?wrap=1",title:"architecture_design_checklist.pdf",children:"architecture_design_checklist.pdf"}),"\xa0 and should be used as a guidance."]})]})}function m(t={}){const{wrapper:e}={...(0,r.a)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(d,{...t})}):d(t)}},11151:(t,e,n)=>{n.d(e,{Z:()=>i,a:()=>o});var s=n(67294);const r={},a=s.createContext(r);function o(t){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:o(t.components),s.createElement(a.Provider,{value:e},t.children)}}}]);